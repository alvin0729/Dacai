// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basketball_data_center.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "BasketballDataCenter.pbobjc.h"
#import "Gamelive.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - PBMBasketballDataCenterRoot

@implementation PBMBasketballDataCenterRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
    };
    #pragma unused (descriptions)
    [registry addExtensions:[PBMGameliveRoot extensionRegistry]];
  }
  return registry;
}

@end

static GPBFileDescriptor *PBMBasketballDataCenterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Dacai.Protobuf"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PBMBasketballHeader

@implementation PBMBasketballHeader

@dynamic hasMatchId, matchId;
@dynamic hasOrderNumber, orderNumber;
@dynamic hasOrderNumberName, orderNumberName;
@dynamic hasCompetition, competition;
@dynamic hasStartTime, startTime;
@dynamic hasHomeName, homeName;
@dynamic hasAwayName, awayName;
@dynamic hasHomeLogo, homeLogo;
@dynamic hasAwayLogo, awayLogo;
@dynamic hasHomeRank, homeRank;
@dynamic hasAwayRank, awayRank;
@dynamic hasStatus, status;
@dynamic hasCommentCount, commentCount;
@dynamic hasOnTime, onTime;
@dynamic hasHomeTotalScore, homeTotalScore;
@dynamic hasAwayTotalScore, awayTotalScore;
@dynamic hasFocus, focus;

typedef struct PBMBasketballHeader_Storage {
  uint32_t _has_storage_[1];
  BOOL focus;
  int32_t orderNumber;
  PBMBasketballMatchStatus status;
  int32_t commentCount;
  int32_t homeTotalScore;
  int32_t awayTotalScore;
  NSString *orderNumberName;
  NSString *competition;
  NSString *startTime;
  NSString *homeName;
  NSString *awayName;
  NSString *homeLogo;
  NSString *awayLogo;
  NSString *homeRank;
  NSString *awayRank;
  NSString *onTime;
  int64_t matchId;
} PBMBasketballHeader_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "matchId",
        .number = PBMBasketballHeader_FieldNumber_MatchId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PBMBasketballHeader_Storage, matchId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderNumber",
        .number = PBMBasketballHeader_FieldNumber_OrderNumber,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballHeader_Storage, orderNumber),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderNumberName",
        .number = PBMBasketballHeader_FieldNumber_OrderNumberName,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, orderNumberName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "competition",
        .number = PBMBasketballHeader_FieldNumber_Competition,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, competition),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = PBMBasketballHeader_FieldNumber_StartTime,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, startTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeName",
        .number = PBMBasketballHeader_FieldNumber_HomeName,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, homeName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayName",
        .number = PBMBasketballHeader_FieldNumber_AwayName,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, awayName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeLogo",
        .number = PBMBasketballHeader_FieldNumber_HomeLogo,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, homeLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayLogo",
        .number = PBMBasketballHeader_FieldNumber_AwayLogo,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, awayLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeRank",
        .number = PBMBasketballHeader_FieldNumber_HomeRank,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, homeRank),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayRank",
        .number = PBMBasketballHeader_FieldNumber_AwayRank,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, awayRank),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "status",
        .number = PBMBasketballHeader_FieldNumber_Status,
        .hasIndex = 11,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .type = GPBTypeEnum,
        .offset = offsetof(PBMBasketballHeader_Storage, status),
        .defaultValue.valueEnum = PBMBasketballMatchStatus_BasketballNotStart,
        .typeSpecific.enumDescFunc = PBMBasketballMatchStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "commentCount",
        .number = PBMBasketballHeader_FieldNumber_CommentCount,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballHeader_Storage, commentCount),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "onTime",
        .number = PBMBasketballHeader_FieldNumber_OnTime,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballHeader_Storage, onTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeTotalScore",
        .number = PBMBasketballHeader_FieldNumber_HomeTotalScore,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballHeader_Storage, homeTotalScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayTotalScore",
        .number = PBMBasketballHeader_FieldNumber_AwayTotalScore,
        .hasIndex = 15,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballHeader_Storage, awayTotalScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "focus",
        .number = PBMBasketballHeader_FieldNumber_Focus,
        .hasIndex = 16,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PBMBasketballHeader_Storage, focus),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballHeader class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballHeader_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMComment

@implementation PBMComment

@dynamic hasUsername, username;
@dynamic hasUserAvatar, userAvatar;
@dynamic hasTime, time;
@dynamic hasContent, content;
@dynamic hasSupportCount, supportCount;
@dynamic hasIsSupported, isSupported;
@dynamic hasCommentId, commentId;

typedef struct PBMComment_Storage {
  uint32_t _has_storage_[1];
  BOOL isSupported;
  int32_t supportCount;
  NSString *username;
  NSString *userAvatar;
  NSString *time;
  NSString *content;
  NSString *commentId;
} PBMComment_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = PBMComment_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMComment_Storage, username),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userAvatar",
        .number = PBMComment_FieldNumber_UserAvatar,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMComment_Storage, userAvatar),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "time",
        .number = PBMComment_FieldNumber_Time,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMComment_Storage, time),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "content",
        .number = PBMComment_FieldNumber_Content,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMComment_Storage, content),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "supportCount",
        .number = PBMComment_FieldNumber_SupportCount,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMComment_Storage, supportCount),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isSupported",
        .number = PBMComment_FieldNumber_IsSupported,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PBMComment_Storage, isSupported),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "commentId",
        .number = PBMComment_FieldNumber_CommentId,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMComment_Storage, commentId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMComment class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMComment_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballComment

@implementation PBMBasketballComment

@dynamic hasMatch, match;
@dynamic commentsArray;
@dynamic hasTotalNum, totalNum;

typedef struct PBMBasketballComment_Storage {
  uint32_t _has_storage_[1];
  int32_t totalNum;
  PBMBasketballHeader *match;
  NSMutableArray *commentsArray;
} PBMBasketballComment_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "match",
        .number = PBMBasketballComment_FieldNumber_Match,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballComment_Storage, match),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballHeader),
        .fieldOptions = NULL,
      },
      {
        .name = "commentsArray",
        .number = PBMBasketballComment_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballComment_Storage, commentsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMComment),
        .fieldOptions = NULL,
      },
      {
        .name = "totalNum",
        .number = PBMBasketballComment_FieldNumber_TotalNum,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballComment_Storage, totalNum),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballComment class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballComment_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMCommentData

@implementation PBMCommentData

@dynamic hasMatchId, matchId;
@dynamic hasGametype, gametype;
@dynamic hasText, text;

typedef struct PBMCommentData_Storage {
  uint32_t _has_storage_[1];
  int32_t gametype;
  NSString *text;
  int64_t matchId;
} PBMCommentData_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "matchId",
        .number = PBMCommentData_FieldNumber_MatchId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PBMCommentData_Storage, matchId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gametype",
        .number = PBMCommentData_FieldNumber_Gametype,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMCommentData_Storage, gametype),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "text",
        .number = PBMCommentData_FieldNumber_Text,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMCommentData_Storage, text),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMCommentData class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMCommentData_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMSupport

@implementation PBMSupport

@dynamic hasMatchId, matchId;
@dynamic hasCommentId, commentId;
@dynamic hasGametype, gametype;

typedef struct PBMSupport_Storage {
  uint32_t _has_storage_[1];
  int32_t gametype;
  NSString *commentId;
  int64_t matchId;
} PBMSupport_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "matchId",
        .number = PBMSupport_FieldNumber_MatchId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PBMSupport_Storage, matchId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "commentId",
        .number = PBMSupport_FieldNumber_CommentId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMSupport_Storage, commentId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gametype",
        .number = PBMSupport_FieldNumber_Gametype,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMSupport_Storage, gametype),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMSupport class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMSupport_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballCompetition

@implementation PBMBasketballCompetition

@dynamic hasMatch, match;
@dynamic hasMatchAction, matchAction;
@dynamic highestsArray;
@dynamic statisticsArray;
@dynamic homeLineupsArray;
@dynamic awayLineupsArray;

typedef struct PBMBasketballCompetition_Storage {
  uint32_t _has_storage_[1];
  PBMBasketballHeader *match;
  PBMBasketballCompetition_MatchAction *matchAction;
  NSMutableArray *highestsArray;
  NSMutableArray *statisticsArray;
  NSMutableArray *homeLineupsArray;
  NSMutableArray *awayLineupsArray;
} PBMBasketballCompetition_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "match",
        .number = PBMBasketballCompetition_FieldNumber_Match,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, match),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballHeader),
        .fieldOptions = NULL,
      },
      {
        .name = "matchAction",
        .number = PBMBasketballCompetition_FieldNumber_MatchAction,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, matchAction),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballCompetition_MatchAction),
        .fieldOptions = NULL,
      },
      {
        .name = "highestsArray",
        .number = PBMBasketballCompetition_FieldNumber_HighestsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, highestsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballCompetition_EachHighest),
        .fieldOptions = NULL,
      },
      {
        .name = "statisticsArray",
        .number = PBMBasketballCompetition_FieldNumber_StatisticsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, statisticsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballCompetition_SkillStatistics),
        .fieldOptions = NULL,
      },
      {
        .name = "homeLineupsArray",
        .number = PBMBasketballCompetition_FieldNumber_HomeLineupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, homeLineupsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballCompetition_TeamLineup),
        .fieldOptions = NULL,
      },
      {
        .name = "awayLineupsArray",
        .number = PBMBasketballCompetition_FieldNumber_AwayLineupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballCompetition_Storage, awayLineupsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballCompetition_TeamLineup),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballCompetition class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballCompetition_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballCompetition_MatchAction

@implementation PBMBasketballCompetition_MatchAction

@dynamic homeScoresArray;
@dynamic awayScoresArray;

typedef struct PBMBasketballCompetition_MatchAction_Storage {
  uint32_t _has_storage_[1];
  GPBInt32Array *homeScoresArray;
  GPBInt32Array *awayScoresArray;
} PBMBasketballCompetition_MatchAction_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeScoresArray",
        .number = PBMBasketballCompetition_MatchAction_FieldNumber_HomeScoresArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_MatchAction_Storage, homeScoresArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayScoresArray",
        .number = PBMBasketballCompetition_MatchAction_FieldNumber_AwayScoresArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_MatchAction_Storage, awayScoresArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballCompetition_MatchAction class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballCompetition_MatchAction_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballCompetition_EachHighest

@implementation PBMBasketballCompetition_EachHighest

@dynamic hasHomePlayer, homePlayer;
@dynamic hasAwayPlayer, awayPlayer;
@dynamic hasHomeScore, homeScore;
@dynamic hasAwayScore, awayScore;
@dynamic hasItemType, itemType;

typedef struct PBMBasketballCompetition_EachHighest_Storage {
  uint32_t _has_storage_[1];
  int32_t homeScore;
  int32_t awayScore;
  NSString *homePlayer;
  NSString *awayPlayer;
  NSString *itemType;
} PBMBasketballCompetition_EachHighest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homePlayer",
        .number = PBMBasketballCompetition_EachHighest_FieldNumber_HomePlayer,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_EachHighest_Storage, homePlayer),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayPlayer",
        .number = PBMBasketballCompetition_EachHighest_FieldNumber_AwayPlayer,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_EachHighest_Storage, awayPlayer),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeScore",
        .number = PBMBasketballCompetition_EachHighest_FieldNumber_HomeScore,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_EachHighest_Storage, homeScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayScore",
        .number = PBMBasketballCompetition_EachHighest_FieldNumber_AwayScore,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_EachHighest_Storage, awayScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "itemType",
        .number = PBMBasketballCompetition_EachHighest_FieldNumber_ItemType,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_EachHighest_Storage, itemType),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballCompetition_EachHighest class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballCompetition_EachHighest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballCompetition_SkillStatistics

@implementation PBMBasketballCompetition_SkillStatistics

@dynamic hasHomeResult, homeResult;
@dynamic hasAwayResult, awayResult;
@dynamic hasHomePercentage, homePercentage;
@dynamic hasAwayPercentage, awayPercentage;
@dynamic hasItemType, itemType;

typedef struct PBMBasketballCompetition_SkillStatistics_Storage {
  uint32_t _has_storage_[1];
  int32_t homePercentage;
  int32_t awayPercentage;
  NSString *homeResult;
  NSString *awayResult;
  NSString *itemType;
} PBMBasketballCompetition_SkillStatistics_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeResult",
        .number = PBMBasketballCompetition_SkillStatistics_FieldNumber_HomeResult,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_SkillStatistics_Storage, homeResult),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayResult",
        .number = PBMBasketballCompetition_SkillStatistics_FieldNumber_AwayResult,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_SkillStatistics_Storage, awayResult),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homePercentage",
        .number = PBMBasketballCompetition_SkillStatistics_FieldNumber_HomePercentage,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_SkillStatistics_Storage, homePercentage),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayPercentage",
        .number = PBMBasketballCompetition_SkillStatistics_FieldNumber_AwayPercentage,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballCompetition_SkillStatistics_Storage, awayPercentage),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "itemType",
        .number = PBMBasketballCompetition_SkillStatistics_FieldNumber_ItemType,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_SkillStatistics_Storage, itemType),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballCompetition_SkillStatistics class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballCompetition_SkillStatistics_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballCompetition_TeamLineup

@implementation PBMBasketballCompetition_TeamLineup

@dynamic hasPositon, positon;
@dynamic hasPlayer, player;
@dynamic hasIsSubstitutes, isSubstitutes;

typedef struct PBMBasketballCompetition_TeamLineup_Storage {
  uint32_t _has_storage_[1];
  BOOL isSubstitutes;
  NSString *positon;
  NSString *player;
} PBMBasketballCompetition_TeamLineup_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "positon",
        .number = PBMBasketballCompetition_TeamLineup_FieldNumber_Positon,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_TeamLineup_Storage, positon),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "player",
        .number = PBMBasketballCompetition_TeamLineup_FieldNumber_Player,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballCompetition_TeamLineup_Storage, player),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isSubstitutes",
        .number = PBMBasketballCompetition_TeamLineup_FieldNumber_IsSubstitutes,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PBMBasketballCompetition_TeamLineup_Storage, isSubstitutes),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballCompetition_TeamLineup class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballCompetition_TeamLineup_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysis

@implementation PBMBasketballAnalysis

@dynamic hasMatchInfo, matchInfo;
@dynamic hasHistoryCombat, historyCombat;
@dynamic hasRecentGains, recentGains;
@dynamic hasHomeFutureCombat, homeFutureCombat;
@dynamic hasAwayFutureCombat, awayFutureCombat;

typedef struct PBMBasketballAnalysis_Storage {
  uint32_t _has_storage_[1];
  PBMBasketballHeader *matchInfo;
  PBMBasketballAnalysis_HistoryComBat *historyCombat;
  PBMBasketballAnalysis_RecentCombatGains *recentGains;
  PBMBasketballAnalysis_FutureCombat *homeFutureCombat;
  PBMBasketballAnalysis_FutureCombat *awayFutureCombat;
} PBMBasketballAnalysis_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "matchInfo",
        .number = PBMBasketballAnalysis_FieldNumber_MatchInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysis_Storage, matchInfo),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballHeader),
        .fieldOptions = NULL,
      },
      {
        .name = "historyCombat",
        .number = PBMBasketballAnalysis_FieldNumber_HistoryCombat,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysis_Storage, historyCombat),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysis_HistoryComBat),
        .fieldOptions = NULL,
      },
      {
        .name = "recentGains",
        .number = PBMBasketballAnalysis_FieldNumber_RecentGains,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysis_Storage, recentGains),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysis_RecentCombatGains),
        .fieldOptions = NULL,
      },
      {
        .name = "homeFutureCombat",
        .number = PBMBasketballAnalysis_FieldNumber_HomeFutureCombat,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysis_Storage, homeFutureCombat),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysis_FutureCombat),
        .fieldOptions = NULL,
      },
      {
        .name = "awayFutureCombat",
        .number = PBMBasketballAnalysis_FieldNumber_AwayFutureCombat,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysis_Storage, awayFutureCombat),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysis_FutureCombat),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysis class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysis_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysis_HistoryComBat

@implementation PBMBasketballAnalysis_HistoryComBat

@dynamic hasHomeWinTimes, homeWinTimes;
@dynamic hasAwayWinTimes, awayWinTimes;
@dynamic hasBigSorceTimes, bigSorceTimes;
@dynamic hasSmallSorceTimes, smallSorceTimes;

typedef struct PBMBasketballAnalysis_HistoryComBat_Storage {
  uint32_t _has_storage_[1];
  int32_t homeWinTimes;
  int32_t awayWinTimes;
  int32_t bigSorceTimes;
  int32_t smallSorceTimes;
} PBMBasketballAnalysis_HistoryComBat_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeWinTimes",
        .number = PBMBasketballAnalysis_HistoryComBat_FieldNumber_HomeWinTimes,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_HistoryComBat_Storage, homeWinTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayWinTimes",
        .number = PBMBasketballAnalysis_HistoryComBat_FieldNumber_AwayWinTimes,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_HistoryComBat_Storage, awayWinTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bigSorceTimes",
        .number = PBMBasketballAnalysis_HistoryComBat_FieldNumber_BigSorceTimes,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_HistoryComBat_Storage, bigSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "smallSorceTimes",
        .number = PBMBasketballAnalysis_HistoryComBat_FieldNumber_SmallSorceTimes,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_HistoryComBat_Storage, smallSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysis_HistoryComBat class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysis_HistoryComBat_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysis_RecentCombatGains

@implementation PBMBasketballAnalysis_RecentCombatGains

@dynamic homeCombatGainsArray;
@dynamic awayCombatGainsArray;
@dynamic hasHomeBigSorceTimes, homeBigSorceTimes;
@dynamic hasHomeSmallSorceTimes, homeSmallSorceTimes;
@dynamic hasAwayBigSorceTimes, awayBigSorceTimes;
@dynamic hasAwaySmallSorceTimes, awaySmallSorceTimes;

typedef struct PBMBasketballAnalysis_RecentCombatGains_Storage {
  uint32_t _has_storage_[1];
  int32_t homeBigSorceTimes;
  int32_t homeSmallSorceTimes;
  int32_t awayBigSorceTimes;
  int32_t awaySmallSorceTimes;
  GPBInt32Array *homeCombatGainsArray;
  GPBInt32Array *awayCombatGainsArray;
} PBMBasketballAnalysis_RecentCombatGains_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeCombatGainsArray",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_HomeCombatGainsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, homeCombatGainsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayCombatGainsArray",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_AwayCombatGainsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, awayCombatGainsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeBigSorceTimes",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_HomeBigSorceTimes,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, homeBigSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeSmallSorceTimes",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_HomeSmallSorceTimes,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, homeSmallSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayBigSorceTimes",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_AwayBigSorceTimes,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, awayBigSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awaySmallSorceTimes",
        .number = PBMBasketballAnalysis_RecentCombatGains_FieldNumber_AwaySmallSorceTimes,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysis_RecentCombatGains_Storage, awaySmallSorceTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\004\003\004\243\245\205\000\004\004\245\245\205\000\005\004\243\245\205\000\006\004\245\245\205\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysis_RecentCombatGains class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysis_RecentCombatGains_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysis_FutureCombat

@implementation PBMBasketballAnalysis_FutureCombat

@dynamic hasHomeName, homeName;
@dynamic hasAwayName, awayName;
@dynamic hasStartTime, startTime;
@dynamic hasHomeLogo, homeLogo;
@dynamic hasAwayLogo, awayLogo;

typedef struct PBMBasketballAnalysis_FutureCombat_Storage {
  uint32_t _has_storage_[1];
  NSString *homeName;
  NSString *awayName;
  NSString *startTime;
  NSString *homeLogo;
  NSString *awayLogo;
} PBMBasketballAnalysis_FutureCombat_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeName",
        .number = PBMBasketballAnalysis_FutureCombat_FieldNumber_HomeName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysis_FutureCombat_Storage, homeName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayName",
        .number = PBMBasketballAnalysis_FutureCombat_FieldNumber_AwayName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysis_FutureCombat_Storage, awayName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = PBMBasketballAnalysis_FutureCombat_FieldNumber_StartTime,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysis_FutureCombat_Storage, startTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeLogo",
        .number = PBMBasketballAnalysis_FutureCombat_FieldNumber_HomeLogo,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysis_FutureCombat_Storage, homeLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayLogo",
        .number = PBMBasketballAnalysis_FutureCombat_FieldNumber_AwayLogo,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysis_FutureCombat_Storage, awayLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysis_FutureCombat class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysis_FutureCombat_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysisDetail

@implementation PBMBasketballAnalysisDetail

@dynamic hasHistory, history;
@dynamic hasHomeRecent, homeRecent;
@dynamic hasAwayRecent, awayRecent;
@dynamic hasHomeFuture, homeFuture;
@dynamic hasAwayFuture, awayFuture;

typedef struct PBMBasketballAnalysisDetail_Storage {
  uint32_t _has_storage_[1];
  PBMBasketballAnalysisDetail_MatchInfoTitle *history;
  PBMBasketballAnalysisDetail_MatchInfoTitle *homeRecent;
  PBMBasketballAnalysisDetail_MatchInfoTitle *awayRecent;
  PBMBasketballAnalysisDetail_MatchInfoTitle *homeFuture;
  PBMBasketballAnalysisDetail_MatchInfoTitle *awayFuture;
} PBMBasketballAnalysisDetail_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "history",
        .number = PBMBasketballAnalysisDetail_FieldNumber_History,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_Storage, history),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoTitle),
        .fieldOptions = NULL,
      },
      {
        .name = "homeRecent",
        .number = PBMBasketballAnalysisDetail_FieldNumber_HomeRecent,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_Storage, homeRecent),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoTitle),
        .fieldOptions = NULL,
      },
      {
        .name = "awayRecent",
        .number = PBMBasketballAnalysisDetail_FieldNumber_AwayRecent,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_Storage, awayRecent),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoTitle),
        .fieldOptions = NULL,
      },
      {
        .name = "homeFuture",
        .number = PBMBasketballAnalysisDetail_FieldNumber_HomeFuture,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_Storage, homeFuture),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoTitle),
        .fieldOptions = NULL,
      },
      {
        .name = "awayFuture",
        .number = PBMBasketballAnalysisDetail_FieldNumber_AwayFuture,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_Storage, awayFuture),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoTitle),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysisDetail class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysisDetail_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysisDetail_MatchInfoTitle

@implementation PBMBasketballAnalysisDetail_MatchInfoTitle

@dynamic hasTotalWin, totalWin;
@dynamic hasTotalLose, totalLose;
@dynamic hasHomeWinTimes, homeWinTimes;
@dynamic hasHomeLoseTimes, homeLoseTimes;
@dynamic hasBigScoreTime, bigScoreTime;
@dynamic hasSmallScoreTime, smallScoreTime;
@dynamic matchInfoListArray;

typedef struct PBMBasketballAnalysisDetail_MatchInfoTitle_Storage {
  uint32_t _has_storage_[1];
  int32_t totalWin;
  int32_t totalLose;
  int32_t homeWinTimes;
  int32_t homeLoseTimes;
  int32_t bigScoreTime;
  int32_t smallScoreTime;
  NSMutableArray *matchInfoListArray;
} PBMBasketballAnalysisDetail_MatchInfoTitle_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalWin",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_TotalWin,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, totalWin),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "totalLose",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_TotalLose,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, totalLose),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeWinTimes",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_HomeWinTimes,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, homeWinTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeLoseTimes",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_HomeLoseTimes,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, homeLoseTimes),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bigScoreTime",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_BigScoreTime,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, bigScoreTime),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "smallScoreTime",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_SmallScoreTime,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, smallScoreTime),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "matchInfoListArray",
        .number = PBMBasketballAnalysisDetail_MatchInfoTitle_FieldNumber_MatchInfoListArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage, matchInfoListArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballAnalysisDetail_MatchInfoDetailInfo),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysisDetail_MatchInfoTitle class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysisDetail_MatchInfoTitle_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballAnalysisDetail_MatchInfoDetailInfo

@implementation PBMBasketballAnalysisDetail_MatchInfoDetailInfo

@dynamic hasCompletion, completion;
@dynamic hasStartTime, startTime;
@dynamic hasHomeTeamName, homeTeamName;
@dynamic hasAwayTeamName, awayTeamName;
@dynamic hasHomeScore, homeScore;
@dynamic hasAwayScore, awayScore;

typedef struct PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage {
  uint32_t _has_storage_[1];
  int32_t homeScore;
  int32_t awayScore;
  NSString *completion;
  NSString *startTime;
  NSString *homeTeamName;
  NSString *awayTeamName;
} PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "completion",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_Completion,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, completion),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_StartTime,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, startTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeTeamName",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_HomeTeamName,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, homeTeamName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayTeamName",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_AwayTeamName,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, awayTeamName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeScore",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_HomeScore,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, homeScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayScore",
        .number = PBMBasketballAnalysisDetail_MatchInfoDetailInfo_FieldNumber_AwayScore,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage, awayScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballAnalysisDetail_MatchInfoDetailInfo class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballAnalysisDetail_MatchInfoDetailInfo_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballIntegral

@implementation PBMBasketballIntegral

@dynamic hasMatch, match;
@dynamic groupsArray;

typedef struct PBMBasketballIntegral_Storage {
  uint32_t _has_storage_[1];
  PBMBasketballHeader *match;
  NSMutableArray *groupsArray;
} PBMBasketballIntegral_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "match",
        .number = PBMBasketballIntegral_FieldNumber_Match,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballIntegral_Storage, match),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballHeader),
        .fieldOptions = NULL,
      },
      {
        .name = "groupsArray",
        .number = PBMBasketballIntegral_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballIntegral_Storage, groupsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballIntegral_IntegralGroup),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballIntegral class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballIntegral_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballIntegral_Integral

@implementation PBMBasketballIntegral_Integral

@dynamic hasRank, rank;
@dynamic hasTeam, team;
@dynamic hasWinTimes, winTimes;
@dynamic hasLoseTimes, loseTimes;
@dynamic hasWinPercentage, winPercentage;
@dynamic hasRecentState, recentState;

typedef struct PBMBasketballIntegral_Integral_Storage {
  uint32_t _has_storage_[1];
  int32_t rank;
  NSString *team;
  NSString *winTimes;
  NSString *loseTimes;
  NSString *winPercentage;
  NSString *recentState;
} PBMBasketballIntegral_Integral_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .number = PBMBasketballIntegral_Integral_FieldNumber_Rank,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, rank),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "team",
        .number = PBMBasketballIntegral_Integral_FieldNumber_Team,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, team),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "winTimes",
        .number = PBMBasketballIntegral_Integral_FieldNumber_WinTimes,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, winTimes),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loseTimes",
        .number = PBMBasketballIntegral_Integral_FieldNumber_LoseTimes,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, loseTimes),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "winPercentage",
        .number = PBMBasketballIntegral_Integral_FieldNumber_WinPercentage,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, winPercentage),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recentState",
        .number = PBMBasketballIntegral_Integral_FieldNumber_RecentState,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_Integral_Storage, recentState),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballIntegral_Integral class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballIntegral_Integral_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballIntegral_IntegralGroup

@implementation PBMBasketballIntegral_IntegralGroup

@dynamic hasTitle, title;
@dynamic integralsArray;

typedef struct PBMBasketballIntegral_IntegralGroup_Storage {
  uint32_t _has_storage_[1];
  NSString *title;
  NSMutableArray *integralsArray;
} PBMBasketballIntegral_IntegralGroup_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .number = PBMBasketballIntegral_IntegralGroup_FieldNumber_Title,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballIntegral_IntegralGroup_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "integralsArray",
        .number = PBMBasketballIntegral_IntegralGroup_FieldNumber_IntegralsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballIntegral_IntegralGroup_Storage, integralsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballIntegral_Integral),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballIntegral_IntegralGroup class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballIntegral_IntegralGroup_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballOdds

@implementation PBMBasketballOdds

@dynamic hasMatch, match;
@dynamic hasSfOdds, sfOdds;
@dynamic hasRfOdds, rfOdds;
@dynamic hasDxOdds, dxOdds;

typedef struct PBMBasketballOdds_Storage {
  uint32_t _has_storage_[1];
  PBMBasketballHeader *match;
  PBMBasketballOdds_OddsHandItem *sfOdds;
  PBMBasketballOdds_OddsHandItem *rfOdds;
  PBMBasketballOdds_OddsHandItem *dxOdds;
} PBMBasketballOdds_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "match",
        .number = PBMBasketballOdds_FieldNumber_Match,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_Storage, match),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballHeader),
        .fieldOptions = NULL,
      },
      {
        .name = "sfOdds",
        .number = PBMBasketballOdds_FieldNumber_SfOdds,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_Storage, sfOdds),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballOdds_OddsHandItem),
        .fieldOptions = NULL,
      },
      {
        .name = "rfOdds",
        .number = PBMBasketballOdds_FieldNumber_RfOdds,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_Storage, rfOdds),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballOdds_OddsHandItem),
        .fieldOptions = NULL,
      },
      {
        .name = "dxOdds",
        .number = PBMBasketballOdds_FieldNumber_DxOdds,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_Storage, dxOdds),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballOdds_OddsHandItem),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballOdds class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballOdds_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballOdds_Odds

@implementation PBMBasketballOdds_Odds

@dynamic hasCompanyId, companyId;
@dynamic hasCompanyName, companyName;
@dynamic oddsArray;
@dynamic trendArray;

typedef struct PBMBasketballOdds_Odds_Storage {
  uint32_t _has_storage_[1];
  int32_t companyId;
  NSString *companyName;
  NSMutableArray *oddsArray;
  GPBInt32Array *trendArray;
} PBMBasketballOdds_Odds_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "companyId",
        .number = PBMBasketballOdds_Odds_FieldNumber_CompanyId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballOdds_Odds_Storage, companyId),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "companyName",
        .number = PBMBasketballOdds_Odds_FieldNumber_CompanyName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballOdds_Odds_Storage, companyName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "oddsArray",
        .number = PBMBasketballOdds_Odds_FieldNumber_OddsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PBMBasketballOdds_Odds_Storage, oddsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trendArray",
        .number = PBMBasketballOdds_Odds_FieldNumber_TrendArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMBasketballOdds_Odds_Storage, trendArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballOdds_Odds class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballOdds_Odds_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMBasketballOdds_OddsHandItem

@implementation PBMBasketballOdds_OddsHandItem

@dynamic oddsInfoListArray;
@dynamic companyNameListArray;

typedef struct PBMBasketballOdds_OddsHandItem_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *oddsInfoListArray;
  NSMutableArray *companyNameListArray;
} PBMBasketballOdds_OddsHandItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oddsInfoListArray",
        .number = PBMBasketballOdds_OddsHandItem_FieldNumber_OddsInfoListArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_OddsHandItem_Storage, oddsInfoListArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMBasketballOdds_Odds),
        .fieldOptions = NULL,
      },
      {
        .name = "companyNameListArray",
        .number = PBMBasketballOdds_OddsHandItem_FieldNumber_CompanyNameListArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMBasketballOdds_OddsHandItem_Storage, companyNameListArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMCompanyItem),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\000oddsInfo_list\000\002\000companyName_list\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMBasketballOdds_OddsHandItem class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMBasketballOdds_OddsHandItem_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end

#pragma mark - PBMCompanyItem

@implementation PBMCompanyItem

@dynamic hasCompanyName, companyName;
@dynamic hasCompanyId, companyId;

typedef struct PBMCompanyItem_Storage {
  uint32_t _has_storage_[1];
  NSString *companyName;
  NSString *companyId;
} PBMCompanyItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "companyName",
        .number = PBMCompanyItem_FieldNumber_CompanyName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMCompanyItem_Storage, companyName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "companyId",
        .number = PBMCompanyItem_FieldNumber_CompanyId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMCompanyItem_Storage, companyId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMCompanyItem class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMCompanyItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMOddsHandicapDetail

@implementation PBMOddsHandicapDetail

@dynamic oddsListArray;

typedef struct PBMOddsHandicapDetail_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *oddsListArray;
} PBMOddsHandicapDetail_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oddsListArray",
        .number = PBMOddsHandicapDetail_FieldNumber_OddsListArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PBMOddsHandicapDetail_Storage, oddsListArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PBMOddsHandicapDetail_OddsCapDetailInfo),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMOddsHandicapDetail class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMOddsHandicapDetail_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PBMOddsHandicapDetail_OddsCapDetailInfo

@implementation PBMOddsHandicapDetail_OddsCapDetailInfo

@dynamic oddsArray;
@dynamic trendsArray;
@dynamic hasUpdateTime, updateTime;

typedef struct PBMOddsHandicapDetail_OddsCapDetailInfo_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *oddsArray;
  GPBInt32Array *trendsArray;
  NSString *updateTime;
} PBMOddsHandicapDetail_OddsCapDetailInfo_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oddsArray",
        .number = PBMOddsHandicapDetail_OddsCapDetailInfo_FieldNumber_OddsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PBMOddsHandicapDetail_OddsCapDetailInfo_Storage, oddsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trendsArray",
        .number = PBMOddsHandicapDetail_OddsCapDetailInfo_FieldNumber_TrendsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeInt32,
        .offset = offsetof(PBMOddsHandicapDetail_OddsCapDetailInfo_Storage, trendsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "updateTime",
        .number = PBMOddsHandicapDetail_OddsCapDetailInfo_FieldNumber_UpdateTime,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PBMOddsHandicapDetail_OddsCapDetailInfo_Storage, updateTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PBMOddsHandicapDetail_OddsCapDetailInfo class]
                                              rootClass:[PBMBasketballDataCenterRoot class]
                                                   file:PBMBasketballDataCenterRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PBMOddsHandicapDetail_OddsCapDetailInfo_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
