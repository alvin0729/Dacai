// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wcgamelive.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Wcgamelive.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - WcgameliveRoot

@implementation WcgameliveRoot

@end

static GPBFileDescriptor *WcgameliveRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Dacai.Protobuf"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - WatchLive

@implementation WatchLive

@dynamic matchesArray;

typedef struct WatchLive_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *matchesArray;
} WatchLive_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "matchesArray",
        .number = WatchLive_FieldNumber_MatchesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(WatchLive_Storage, matchesArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(WatchLive_MatchItem),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[WatchLive class]
                                              rootClass:[WcgameliveRoot class]
                                                   file:WcgameliveRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(WatchLive_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - WatchLive_MatchItem

@implementation WatchLive_MatchItem

@dynamic hasHomeName, homeName;
@dynamic hasAwayName, awayName;
@dynamic hasHomeLogo, homeLogo;
@dynamic hasAwayLogo, awayLogo;
@dynamic hasHomeScore, homeScore;
@dynamic hasAwayScore, awayScore;
@dynamic hasStartTime, startTime;
@dynamic hasHalfTime, halfTime;
@dynamic hasMatchState, matchState;
@dynamic hasOnTime, onTime;

typedef struct WatchLive_MatchItem_Storage {
  uint32_t _has_storage_[1];
  int32_t homeScore;
  int32_t awayScore;
  int32_t matchState;
  NSString *homeName;
  NSString *awayName;
  NSString *homeLogo;
  NSString *awayLogo;
  NSString *startTime;
  NSString *halfTime;
  NSString *onTime;
} WatchLive_MatchItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "homeName",
        .number = WatchLive_MatchItem_FieldNumber_HomeName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, homeName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayName",
        .number = WatchLive_MatchItem_FieldNumber_AwayName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, awayName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeLogo",
        .number = WatchLive_MatchItem_FieldNumber_HomeLogo,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, homeLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayLogo",
        .number = WatchLive_MatchItem_FieldNumber_AwayLogo,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, awayLogo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeScore",
        .number = WatchLive_MatchItem_FieldNumber_HomeScore,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(WatchLive_MatchItem_Storage, homeScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayScore",
        .number = WatchLive_MatchItem_FieldNumber_AwayScore,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(WatchLive_MatchItem_Storage, awayScore),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = WatchLive_MatchItem_FieldNumber_StartTime,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, startTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "halfTime",
        .number = WatchLive_MatchItem_FieldNumber_HalfTime,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, halfTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "matchState",
        .number = WatchLive_MatchItem_FieldNumber_MatchState,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(WatchLive_MatchItem_Storage, matchState),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "onTime",
        .number = WatchLive_MatchItem_FieldNumber_OnTime,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(WatchLive_MatchItem_Storage, onTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[WatchLive_MatchItem class]
                                              rootClass:[WcgameliveRoot class]
                                                   file:WcgameliveRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(WatchLive_MatchItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
