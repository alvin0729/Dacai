// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lottery_history.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "LotteryHistory.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - LotteryHistoryRoot

@implementation LotteryHistoryRoot

@end

static GPBFileDescriptor *LotteryHistoryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Dacai.Protobuf"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LotteryHistoryResult

@implementation LotteryHistoryResult

@dynamic hasCount, count;
@dynamic lotteryHistoryItemArray;

typedef struct LotteryHistoryResult_Storage {
  uint32_t _has_storage_[1];
  int32_t count;
  NSMutableArray *lotteryHistoryItemArray;
} LotteryHistoryResult_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .number = LotteryHistoryResult_FieldNumber_Count,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_Storage, count),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "lotteryHistoryItemArray",
        .number = LotteryHistoryResult_FieldNumber_LotteryHistoryItemArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(LotteryHistoryResult_Storage, lotteryHistoryItemArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(LotteryHistoryResult_LotteryHistoryItem),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[LotteryHistoryResult class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(LotteryHistoryResult_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - LotteryHistoryResult_LotteryHistoryItem

@implementation LotteryHistoryResult_LotteryHistoryItem

@dynamic hasType, type;
@dynamic hasProjectId, projectId;
@dynamic hasGameType, gameType;
@dynamic hasTime, time;
@dynamic hasIssue, issue;
@dynamic hasAmount, amount;
@dynamic hasProjectStatus, projectStatus;
@dynamic hasProjectDesc, projectDesc;
@dynamic hasIsWined, isWined;
@dynamic hasTicketStatus, ticketStatus;
@dynamic hasTicketStatusDesc, ticketStatusDesc;

typedef struct LotteryHistoryResult_LotteryHistoryItem_Storage {
  uint32_t _has_storage_[1];
  BOOL isWined;
  int32_t type;
  int32_t gameType;
  int32_t amount;
  int32_t projectStatus;
  int32_t ticketStatus;
  NSString *time;
  NSString *issue;
  NSString *projectDesc;
  NSString *ticketStatusDesc;
  int64_t projectId;
} LotteryHistoryResult_LotteryHistoryItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_Type,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, type),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectId",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_ProjectId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, projectId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gameType",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_GameType,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, gameType),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "time",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_Time,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, time),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "issue",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_Issue,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, issue),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_Amount,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, amount),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectStatus",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_ProjectStatus,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, projectStatus),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectDesc",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_ProjectDesc,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, projectDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isWined",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_IsWined,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, isWined),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ticketStatus",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_TicketStatus,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, ticketStatus),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ticketStatusDesc",
        .number = LotteryHistoryResult_LotteryHistoryItem_FieldNumber_TicketStatusDesc,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(LotteryHistoryResult_LotteryHistoryItem_Storage, ticketStatusDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[LotteryHistoryResult_LotteryHistoryItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(LotteryHistoryResult_LotteryHistoryItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult

@implementation PlanDetailResult

@dynamic hasOrderId, orderId;
@dynamic hasProjectId, projectId;
@dynamic hasGameType, gameType;
@dynamic hasAmount, amount;
@dynamic hasNeedAmt, needAmt;
@dynamic hasProjectStatus, projectStatus;
@dynamic hasProjectStatusDesc, projectStatusDesc;
@dynamic hasSysProcessStepId, sysProcessStepId;
@dynamic hasWinedAmt, winedAmt;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic hasContentType, contentType;
@dynamic hasIsCanVisit, isCanVisit;
@dynamic hasTicketStatus, ticketStatus;
@dynamic hasTicketStatusDesc, ticketStatusDesc;
@dynamic hasQuantity, quantity;
@dynamic hasMultiple, multiple;
@dynamic hasCreatorName, creatorName;
@dynamic hasWinDesc, winDesc;
@dynamic hasShareURL, shareURL;
@dynamic hasIsFilter, isFilter;
@dynamic hasIssue, issue;
@dynamic drawRedsArray;
@dynamic drawBluesArray;
@dynamic hasIsDraw, isDraw;
@dynamic hasDrawTime, drawTime;
@dynamic hasGgfs, ggfs;
@dynamic hasCount, count;
@dynamic dltItemArray;
@dynamic jcItemArray;
@dynamic hasPayStatus, payStatus;
@dynamic hasShareItem, shareItem;
@dynamic optimizeItemArray;

typedef struct PlanDetailResult_Storage {
  uint32_t _has_storage_[2];
  BOOL isCanVisit;
  BOOL isFilter;
  BOOL isDraw;
  int32_t gameType;
  int32_t amount;
  float needAmt;
  int32_t projectStatus;
  int32_t sysProcessStepId;
  int32_t contentType;
  int32_t ticketStatus;
  int32_t count;
  int32_t payStatus;
  NSString *projectStatusDesc;
  NSString *startTime;
  NSString *endTime;
  NSString *ticketStatusDesc;
  NSString *creatorName;
  NSString *winDesc;
  NSString *shareURL;
  NSString *issue;
  NSMutableArray *drawRedsArray;
  NSMutableArray *drawBluesArray;
  NSString *drawTime;
  NSString *ggfs;
  NSMutableArray *dltItemArray;
  NSMutableArray *jcItemArray;
  PlanDetailResult_ShareItem *shareItem;
  NSMutableArray *optimizeItemArray;
  int64_t orderId;
  int64_t projectId;
  double winedAmt;
  int64_t quantity;
  int64_t multiple;
} PlanDetailResult_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .number = PlanDetailResult_FieldNumber_OrderId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_Storage, orderId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectId",
        .number = PlanDetailResult_FieldNumber_ProjectId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_Storage, projectId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gameType",
        .number = PlanDetailResult_FieldNumber_GameType,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, gameType),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = PlanDetailResult_FieldNumber_Amount,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, amount),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "needAmt",
        .number = PlanDetailResult_FieldNumber_NeedAmt,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeFloat,
        .offset = offsetof(PlanDetailResult_Storage, needAmt),
        .defaultValue.valueFloat = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectStatus",
        .number = PlanDetailResult_FieldNumber_ProjectStatus,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, projectStatus),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "projectStatusDesc",
        .number = PlanDetailResult_FieldNumber_ProjectStatusDesc,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, projectStatusDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sysProcessStepId",
        .number = PlanDetailResult_FieldNumber_SysProcessStepId,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, sysProcessStepId),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "winedAmt",
        .number = PlanDetailResult_FieldNumber_WinedAmt,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeDouble,
        .offset = offsetof(PlanDetailResult_Storage, winedAmt),
        .defaultValue.valueDouble = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = PlanDetailResult_FieldNumber_StartTime,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, startTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "endTime",
        .number = PlanDetailResult_FieldNumber_EndTime,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, endTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "contentType",
        .number = PlanDetailResult_FieldNumber_ContentType,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, contentType),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isCanVisit",
        .number = PlanDetailResult_FieldNumber_IsCanVisit,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_Storage, isCanVisit),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ticketStatus",
        .number = PlanDetailResult_FieldNumber_TicketStatus,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, ticketStatus),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ticketStatusDesc",
        .number = PlanDetailResult_FieldNumber_TicketStatusDesc,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, ticketStatusDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "quantity",
        .number = PlanDetailResult_FieldNumber_Quantity,
        .hasIndex = 15,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_Storage, quantity),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "multiple",
        .number = PlanDetailResult_FieldNumber_Multiple,
        .hasIndex = 16,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_Storage, multiple),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "creatorName",
        .number = PlanDetailResult_FieldNumber_CreatorName,
        .hasIndex = 17,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, creatorName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "winDesc",
        .number = PlanDetailResult_FieldNumber_WinDesc,
        .hasIndex = 18,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, winDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "shareURL",
        .number = PlanDetailResult_FieldNumber_ShareURL,
        .hasIndex = 19,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, shareURL),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isFilter",
        .number = PlanDetailResult_FieldNumber_IsFilter,
        .hasIndex = 20,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_Storage, isFilter),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "issue",
        .number = PlanDetailResult_FieldNumber_Issue,
        .hasIndex = 21,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, issue),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "drawRedsArray",
        .number = PlanDetailResult_FieldNumber_DrawRedsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, drawRedsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "drawBluesArray",
        .number = PlanDetailResult_FieldNumber_DrawBluesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, drawBluesArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isDraw",
        .number = PlanDetailResult_FieldNumber_IsDraw,
        .hasIndex = 24,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_Storage, isDraw),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "drawTime",
        .number = PlanDetailResult_FieldNumber_DrawTime,
        .hasIndex = 25,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, drawTime),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ggfs",
        .number = PlanDetailResult_FieldNumber_Ggfs,
        .hasIndex = 26,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_Storage, ggfs),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "count",
        .number = PlanDetailResult_FieldNumber_Count,
        .hasIndex = 27,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, count),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "dltItemArray",
        .number = PlanDetailResult_FieldNumber_DltItemArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_Storage, dltItemArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_DltItem),
        .fieldOptions = NULL,
      },
      {
        .name = "jcItemArray",
        .number = PlanDetailResult_FieldNumber_JcItemArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_Storage, jcItemArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_JcItem),
        .fieldOptions = NULL,
      },
      {
        .name = "payStatus",
        .number = PlanDetailResult_FieldNumber_PayStatus,
        .hasIndex = 30,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_Storage, payStatus),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "shareItem",
        .number = PlanDetailResult_FieldNumber_ShareItem,
        .hasIndex = 31,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_Storage, shareItem),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_ShareItem),
        .fieldOptions = NULL,
      },
      {
        .name = "optimizeItemArray",
        .number = PlanDetailResult_FieldNumber_OptimizeItemArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_Storage, optimizeItemArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_OptimizeItem),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\024\005\241!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_OptimizeMatchItem

@implementation PlanDetailResult_OptimizeMatchItem

@dynamic hasOrderNumberName, orderNumberName;
@dynamic hasHomeTeamName, homeTeamName;
@dynamic hasAwayTeamName, awayTeamName;
@dynamic hasOption, option;
@dynamic hasSp, sp;

typedef struct PlanDetailResult_OptimizeMatchItem_Storage {
  uint32_t _has_storage_[1];
  NSString *orderNumberName;
  NSString *homeTeamName;
  NSString *awayTeamName;
  NSString *option;
  NSString *sp;
} PlanDetailResult_OptimizeMatchItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderNumberName",
        .number = PlanDetailResult_OptimizeMatchItem_FieldNumber_OrderNumberName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeMatchItem_Storage, orderNumberName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeTeamName",
        .number = PlanDetailResult_OptimizeMatchItem_FieldNumber_HomeTeamName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeMatchItem_Storage, homeTeamName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayTeamName",
        .number = PlanDetailResult_OptimizeMatchItem_FieldNumber_AwayTeamName,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeMatchItem_Storage, awayTeamName),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "option",
        .number = PlanDetailResult_OptimizeMatchItem_FieldNumber_Option,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeMatchItem_Storage, option),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sp",
        .number = PlanDetailResult_OptimizeMatchItem_FieldNumber_Sp,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeMatchItem_Storage, sp),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_OptimizeMatchItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_OptimizeMatchItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_OptimizeItem

@implementation PlanDetailResult_OptimizeItem

@dynamic hasGgfs, ggfs;
@dynamic hasQuantity, quantity;
@dynamic hasBonus, bonus;
@dynamic optimizeMatchItemArray;

typedef struct PlanDetailResult_OptimizeItem_Storage {
  uint32_t _has_storage_[1];
  NSString *ggfs;
  NSString *bonus;
  NSMutableArray *optimizeMatchItemArray;
  int64_t quantity;
} PlanDetailResult_OptimizeItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ggfs",
        .number = PlanDetailResult_OptimizeItem_FieldNumber_Ggfs,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeItem_Storage, ggfs),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "quantity",
        .number = PlanDetailResult_OptimizeItem_FieldNumber_Quantity,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_OptimizeItem_Storage, quantity),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bonus",
        .number = PlanDetailResult_OptimizeItem_FieldNumber_Bonus,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_OptimizeItem_Storage, bonus),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "optimizeMatchItemArray",
        .number = PlanDetailResult_OptimizeItem_FieldNumber_OptimizeMatchItemArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_OptimizeItem_Storage, optimizeMatchItemArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_OptimizeMatchItem),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_OptimizeItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_OptimizeItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_ShareItem

@implementation PlanDetailResult_ShareItem

@dynamic hasShareTitle, shareTitle;
@dynamic hasShareContent, shareContent;
@dynamic hasShareURL, shareURL;

typedef struct PlanDetailResult_ShareItem_Storage {
  uint32_t _has_storage_[1];
  NSString *shareTitle;
  NSString *shareContent;
  NSString *shareURL;
} PlanDetailResult_ShareItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shareTitle",
        .number = PlanDetailResult_ShareItem_FieldNumber_ShareTitle,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_ShareItem_Storage, shareTitle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "shareContent",
        .number = PlanDetailResult_ShareItem_FieldNumber_ShareContent,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_ShareItem_Storage, shareContent),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "shareURL",
        .number = PlanDetailResult_ShareItem_FieldNumber_ShareURL,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_ShareItem_Storage, shareURL),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\003\005\241!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_ShareItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_ShareItem_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_DltResult

@implementation PlanDetailResult_DltResult

@dynamic redsArray;
@dynamic bluesArray;

typedef struct PlanDetailResult_DltResult_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *redsArray;
  NSMutableArray *bluesArray;
} PlanDetailResult_DltResult_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redsArray",
        .number = PlanDetailResult_DltResult_FieldNumber_RedsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltResult_Storage, redsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bluesArray",
        .number = PlanDetailResult_DltResult_FieldNumber_BluesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltResult_Storage, bluesArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_DltResult class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_DltResult_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_DltDTResult

@implementation PlanDetailResult_DltDTResult

@dynamic redDansArray;
@dynamic redTuosArray;
@dynamic blueDansArray;
@dynamic blueTuosArray;

typedef struct PlanDetailResult_DltDTResult_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *redDansArray;
  NSMutableArray *redTuosArray;
  NSMutableArray *blueDansArray;
  NSMutableArray *blueTuosArray;
} PlanDetailResult_DltDTResult_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "redDansArray",
        .number = PlanDetailResult_DltDTResult_FieldNumber_RedDansArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltDTResult_Storage, redDansArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "redTuosArray",
        .number = PlanDetailResult_DltDTResult_FieldNumber_RedTuosArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltDTResult_Storage, redTuosArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "blueDansArray",
        .number = PlanDetailResult_DltDTResult_FieldNumber_BlueDansArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltDTResult_Storage, blueDansArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "blueTuosArray",
        .number = PlanDetailResult_DltDTResult_FieldNumber_BlueTuosArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltDTResult_Storage, blueTuosArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_DltDTResult class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_DltDTResult_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_DltItem

@implementation PlanDetailResult_DltItem

@dynamic hasGameplayId, gameplayId;
@dynamic hasGameplayDesc, gameplayDesc;
@dynamic hasQuantity, quantity;
@dynamic hasIsAppend, isAppend;
@dynamic dltResultsArray;
@dynamic dltDtResultsArray;

typedef struct PlanDetailResult_DltItem_Storage {
  uint32_t _has_storage_[1];
  BOOL isAppend;
  int32_t gameplayId;
  NSString *gameplayDesc;
  NSMutableArray *dltResultsArray;
  NSMutableArray *dltDtResultsArray;
  int64_t quantity;
} PlanDetailResult_DltItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameplayId",
        .number = PlanDetailResult_DltItem_FieldNumber_GameplayId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, gameplayId),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gameplayDesc",
        .number = PlanDetailResult_DltItem_FieldNumber_GameplayDesc,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, gameplayDesc),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "quantity",
        .number = PlanDetailResult_DltItem_FieldNumber_Quantity,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, quantity),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "isAppend",
        .number = PlanDetailResult_DltItem_FieldNumber_IsAppend,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, isAppend),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "dltResultsArray",
        .number = PlanDetailResult_DltItem_FieldNumber_DltResultsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, dltResultsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_DltResult),
        .fieldOptions = NULL,
      },
      {
        .name = "dltDtResultsArray",
        .number = PlanDetailResult_DltItem_FieldNumber_DltDtResultsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_DltItem_Storage, dltDtResultsArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_DltDTResult),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_DltItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_DltItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_JcResult

@implementation PlanDetailResult_JcResult

@dynamic hasIsWin, isWin;
@dynamic hasResult, result;
@dynamic hasGameType, gameType;

typedef struct PlanDetailResult_JcResult_Storage {
  uint32_t _has_storage_[1];
  BOOL isWin;
  int32_t gameType;
  NSString *result;
} PlanDetailResult_JcResult_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isWin",
        .number = PlanDetailResult_JcResult_FieldNumber_IsWin,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_JcResult_Storage, isWin),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "result",
        .number = PlanDetailResult_JcResult_FieldNumber_Result,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcResult_Storage, result),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gameType",
        .number = PlanDetailResult_JcResult_FieldNumber_GameType,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_JcResult_Storage, gameType),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_JcResult class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_JcResult_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - PlanDetailResult_JcItem

@implementation PlanDetailResult_JcItem

@dynamic hasDataNum, dataNum;
@dynamic hasHomeTeam, homeTeam;
@dynamic hasHomeRank, homeRank;
@dynamic hasAwayTeam, awayTeam;
@dynamic hasAwayRank, awayRank;
@dynamic hasScore, score;
@dynamic hasRqs, rqs;
@dynamic jcResultArray;
@dynamic hasIsDan, isDan;

typedef struct PlanDetailResult_JcItem_Storage {
  uint32_t _has_storage_[1];
  BOOL isDan;
  int32_t rqs;
  NSString *dataNum;
  NSString *homeTeam;
  NSString *homeRank;
  NSString *awayTeam;
  NSString *awayRank;
  NSString *score;
  NSMutableArray *jcResultArray;
} PlanDetailResult_JcItem_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataNum",
        .number = PlanDetailResult_JcItem_FieldNumber_DataNum,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, dataNum),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeTeam",
        .number = PlanDetailResult_JcItem_FieldNumber_HomeTeam,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, homeTeam),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "homeRank",
        .number = PlanDetailResult_JcItem_FieldNumber_HomeRank,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, homeRank),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayTeam",
        .number = PlanDetailResult_JcItem_FieldNumber_AwayTeam,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, awayTeam),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "awayRank",
        .number = PlanDetailResult_JcItem_FieldNumber_AwayRank,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, awayRank),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "score",
        .number = PlanDetailResult_JcItem_FieldNumber_Score,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, score),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "rqs",
        .number = PlanDetailResult_JcItem_FieldNumber_Rqs,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, rqs),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "jcResultArray",
        .number = PlanDetailResult_JcItem_FieldNumber_JcResultArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, jcResultArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(PlanDetailResult_JcResult),
        .fieldOptions = NULL,
      },
      {
        .name = "isDan",
        .number = PlanDetailResult_JcItem_FieldNumber_IsDan,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(PlanDetailResult_JcItem_Storage, isDan),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[PlanDetailResult_JcItem class]
                                              rootClass:[LotteryHistoryRoot class]
                                                   file:LotteryHistoryRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(PlanDetailResult_JcItem_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
